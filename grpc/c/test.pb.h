// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace helloworld {
class C_IN;
struct C_INDefaultTypeInternal;
extern C_INDefaultTypeInternal _C_IN_default_instance_;
class C_OUT;
struct C_OUTDefaultTypeInternal;
extern C_OUTDefaultTypeInternal _C_OUT_default_instance_;
class PY_IN;
struct PY_INDefaultTypeInternal;
extern PY_INDefaultTypeInternal _PY_IN_default_instance_;
class PY_OUT;
struct PY_OUTDefaultTypeInternal;
extern PY_OUTDefaultTypeInternal _PY_OUT_default_instance_;
}  // namespace helloworld
PROTOBUF_NAMESPACE_OPEN
template<> ::helloworld::C_IN* Arena::CreateMaybeMessage<::helloworld::C_IN>(Arena*);
template<> ::helloworld::C_OUT* Arena::CreateMaybeMessage<::helloworld::C_OUT>(Arena*);
template<> ::helloworld::PY_IN* Arena::CreateMaybeMessage<::helloworld::PY_IN>(Arena*);
template<> ::helloworld::PY_OUT* Arena::CreateMaybeMessage<::helloworld::PY_OUT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace helloworld {

// ===================================================================

class C_IN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.C_IN) */ {
 public:
  inline C_IN() : C_IN(nullptr) {}
  ~C_IN() override;
  explicit PROTOBUF_CONSTEXPR C_IN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_IN(const C_IN& from);
  C_IN(C_IN&& from) noexcept
    : C_IN() {
    *this = ::std::move(from);
  }

  inline C_IN& operator=(const C_IN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_IN& operator=(C_IN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_IN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_IN* internal_default_instance() {
    return reinterpret_cast<const C_IN*>(
               &_C_IN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_IN& a, C_IN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_IN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_IN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_IN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_IN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_IN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_IN& from) {
    C_IN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_IN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.C_IN";
  }
  protected:
  explicit C_IN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaFieldNumber = 1,
  };
  // string ca = 1;
  void clear_ca();
  const std::string& ca() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ca(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ca();
  PROTOBUF_NODISCARD std::string* release_ca();
  void set_allocated_ca(std::string* ca);
  private:
  const std::string& _internal_ca() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ca(const std::string& value);
  std::string* _internal_mutable_ca();
  public:

  // @@protoc_insertion_point(class_scope:helloworld.C_IN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ca_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class C_OUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.C_OUT) */ {
 public:
  inline C_OUT() : C_OUT(nullptr) {}
  ~C_OUT() override;
  explicit PROTOBUF_CONSTEXPR C_OUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_OUT(const C_OUT& from);
  C_OUT(C_OUT&& from) noexcept
    : C_OUT() {
    *this = ::std::move(from);
  }

  inline C_OUT& operator=(const C_OUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_OUT& operator=(C_OUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_OUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_OUT* internal_default_instance() {
    return reinterpret_cast<const C_OUT*>(
               &_C_OUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_OUT& a, C_OUT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_OUT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_OUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_OUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_OUT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_OUT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_OUT& from) {
    C_OUT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_OUT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.C_OUT";
  }
  protected:
  explicit C_OUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCbFieldNumber = 1,
  };
  // string cb = 1;
  void clear_cb();
  const std::string& cb() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cb(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cb();
  PROTOBUF_NODISCARD std::string* release_cb();
  void set_allocated_cb(std::string* cb);
  private:
  const std::string& _internal_cb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cb(const std::string& value);
  std::string* _internal_mutable_cb();
  public:

  // @@protoc_insertion_point(class_scope:helloworld.C_OUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cb_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class PY_IN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.PY_IN) */ {
 public:
  inline PY_IN() : PY_IN(nullptr) {}
  ~PY_IN() override;
  explicit PROTOBUF_CONSTEXPR PY_IN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PY_IN(const PY_IN& from);
  PY_IN(PY_IN&& from) noexcept
    : PY_IN() {
    *this = ::std::move(from);
  }

  inline PY_IN& operator=(const PY_IN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PY_IN& operator=(PY_IN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PY_IN& default_instance() {
    return *internal_default_instance();
  }
  static inline const PY_IN* internal_default_instance() {
    return reinterpret_cast<const PY_IN*>(
               &_PY_IN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PY_IN& a, PY_IN& b) {
    a.Swap(&b);
  }
  inline void Swap(PY_IN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PY_IN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PY_IN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PY_IN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PY_IN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PY_IN& from) {
    PY_IN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PY_IN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.PY_IN";
  }
  protected:
  explicit PY_IN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPyaFieldNumber = 1,
  };
  // string pya = 1;
  void clear_pya();
  const std::string& pya() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pya(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pya();
  PROTOBUF_NODISCARD std::string* release_pya();
  void set_allocated_pya(std::string* pya);
  private:
  const std::string& _internal_pya() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pya(const std::string& value);
  std::string* _internal_mutable_pya();
  public:

  // @@protoc_insertion_point(class_scope:helloworld.PY_IN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pya_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class PY_OUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:helloworld.PY_OUT) */ {
 public:
  inline PY_OUT() : PY_OUT(nullptr) {}
  ~PY_OUT() override;
  explicit PROTOBUF_CONSTEXPR PY_OUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PY_OUT(const PY_OUT& from);
  PY_OUT(PY_OUT&& from) noexcept
    : PY_OUT() {
    *this = ::std::move(from);
  }

  inline PY_OUT& operator=(const PY_OUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline PY_OUT& operator=(PY_OUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PY_OUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const PY_OUT* internal_default_instance() {
    return reinterpret_cast<const PY_OUT*>(
               &_PY_OUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PY_OUT& a, PY_OUT& b) {
    a.Swap(&b);
  }
  inline void Swap(PY_OUT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PY_OUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PY_OUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PY_OUT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PY_OUT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PY_OUT& from) {
    PY_OUT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PY_OUT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "helloworld.PY_OUT";
  }
  protected:
  explicit PY_OUT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPybFieldNumber = 1,
  };
  // string pyb = 1;
  void clear_pyb();
  const std::string& pyb() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pyb(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pyb();
  PROTOBUF_NODISCARD std::string* release_pyb();
  void set_allocated_pyb(std::string* pyb);
  private:
  const std::string& _internal_pyb() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pyb(const std::string& value);
  std::string* _internal_mutable_pyb();
  public:

  // @@protoc_insertion_point(class_scope:helloworld.PY_OUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pyb_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_IN

// string ca = 1;
inline void C_IN::clear_ca() {
  _impl_.ca_.ClearToEmpty();
}
inline const std::string& C_IN::ca() const {
  // @@protoc_insertion_point(field_get:helloworld.C_IN.ca)
  return _internal_ca();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_IN::set_ca(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ca_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.C_IN.ca)
}
inline std::string* C_IN::mutable_ca() {
  std::string* _s = _internal_mutable_ca();
  // @@protoc_insertion_point(field_mutable:helloworld.C_IN.ca)
  return _s;
}
inline const std::string& C_IN::_internal_ca() const {
  return _impl_.ca_.Get();
}
inline void C_IN::_internal_set_ca(const std::string& value) {
  
  _impl_.ca_.Set(value, GetArenaForAllocation());
}
inline std::string* C_IN::_internal_mutable_ca() {
  
  return _impl_.ca_.Mutable(GetArenaForAllocation());
}
inline std::string* C_IN::release_ca() {
  // @@protoc_insertion_point(field_release:helloworld.C_IN.ca)
  return _impl_.ca_.Release();
}
inline void C_IN::set_allocated_ca(std::string* ca) {
  if (ca != nullptr) {
    
  } else {
    
  }
  _impl_.ca_.SetAllocated(ca, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ca_.IsDefault()) {
    _impl_.ca_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.C_IN.ca)
}

// -------------------------------------------------------------------

// C_OUT

// string cb = 1;
inline void C_OUT::clear_cb() {
  _impl_.cb_.ClearToEmpty();
}
inline const std::string& C_OUT::cb() const {
  // @@protoc_insertion_point(field_get:helloworld.C_OUT.cb)
  return _internal_cb();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_OUT::set_cb(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cb_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.C_OUT.cb)
}
inline std::string* C_OUT::mutable_cb() {
  std::string* _s = _internal_mutable_cb();
  // @@protoc_insertion_point(field_mutable:helloworld.C_OUT.cb)
  return _s;
}
inline const std::string& C_OUT::_internal_cb() const {
  return _impl_.cb_.Get();
}
inline void C_OUT::_internal_set_cb(const std::string& value) {
  
  _impl_.cb_.Set(value, GetArenaForAllocation());
}
inline std::string* C_OUT::_internal_mutable_cb() {
  
  return _impl_.cb_.Mutable(GetArenaForAllocation());
}
inline std::string* C_OUT::release_cb() {
  // @@protoc_insertion_point(field_release:helloworld.C_OUT.cb)
  return _impl_.cb_.Release();
}
inline void C_OUT::set_allocated_cb(std::string* cb) {
  if (cb != nullptr) {
    
  } else {
    
  }
  _impl_.cb_.SetAllocated(cb, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cb_.IsDefault()) {
    _impl_.cb_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.C_OUT.cb)
}

// -------------------------------------------------------------------

// PY_IN

// string pya = 1;
inline void PY_IN::clear_pya() {
  _impl_.pya_.ClearToEmpty();
}
inline const std::string& PY_IN::pya() const {
  // @@protoc_insertion_point(field_get:helloworld.PY_IN.pya)
  return _internal_pya();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PY_IN::set_pya(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pya_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.PY_IN.pya)
}
inline std::string* PY_IN::mutable_pya() {
  std::string* _s = _internal_mutable_pya();
  // @@protoc_insertion_point(field_mutable:helloworld.PY_IN.pya)
  return _s;
}
inline const std::string& PY_IN::_internal_pya() const {
  return _impl_.pya_.Get();
}
inline void PY_IN::_internal_set_pya(const std::string& value) {
  
  _impl_.pya_.Set(value, GetArenaForAllocation());
}
inline std::string* PY_IN::_internal_mutable_pya() {
  
  return _impl_.pya_.Mutable(GetArenaForAllocation());
}
inline std::string* PY_IN::release_pya() {
  // @@protoc_insertion_point(field_release:helloworld.PY_IN.pya)
  return _impl_.pya_.Release();
}
inline void PY_IN::set_allocated_pya(std::string* pya) {
  if (pya != nullptr) {
    
  } else {
    
  }
  _impl_.pya_.SetAllocated(pya, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pya_.IsDefault()) {
    _impl_.pya_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.PY_IN.pya)
}

// -------------------------------------------------------------------

// PY_OUT

// string pyb = 1;
inline void PY_OUT::clear_pyb() {
  _impl_.pyb_.ClearToEmpty();
}
inline const std::string& PY_OUT::pyb() const {
  // @@protoc_insertion_point(field_get:helloworld.PY_OUT.pyb)
  return _internal_pyb();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PY_OUT::set_pyb(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pyb_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:helloworld.PY_OUT.pyb)
}
inline std::string* PY_OUT::mutable_pyb() {
  std::string* _s = _internal_mutable_pyb();
  // @@protoc_insertion_point(field_mutable:helloworld.PY_OUT.pyb)
  return _s;
}
inline const std::string& PY_OUT::_internal_pyb() const {
  return _impl_.pyb_.Get();
}
inline void PY_OUT::_internal_set_pyb(const std::string& value) {
  
  _impl_.pyb_.Set(value, GetArenaForAllocation());
}
inline std::string* PY_OUT::_internal_mutable_pyb() {
  
  return _impl_.pyb_.Mutable(GetArenaForAllocation());
}
inline std::string* PY_OUT::release_pyb() {
  // @@protoc_insertion_point(field_release:helloworld.PY_OUT.pyb)
  return _impl_.pyb_.Release();
}
inline void PY_OUT::set_allocated_pyb(std::string* pyb) {
  if (pyb != nullptr) {
    
  } else {
    
  }
  _impl_.pyb_.SetAllocated(pyb, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pyb_.IsDefault()) {
    _impl_.pyb_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:helloworld.PY_OUT.pyb)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace helloworld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
